buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ysb33r.gradle:doxygen-gradle-plugin:0.7.0'
    }
}

plugins {
    id 'java-library'
    id 'c'
    id 'org.ysb33r.doxygen' version '0.7.0'
    id 'distribution'
    id 'maven-publish'
    id 'eclipse'
}

repositories {
    mavenCentral()
}

group = 'ca.umontreal.iro.simul'

sourceCompatibility = 1.23  // Target Java 23
targetCompatibility = 1.23  // Target Java 23

version = '3.3.2'

dependencies {
    implementation 'org.jfree:jcommon:1.0.24'
    implementation 'org.jfree:jfreechart:1.5.3'
    implementation 'colt:colt:1.2.0'
    implementation 'com.github.rwl:optimization:1.3'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    testImplementation 'junit:junit:4.+'
}

defaultTasks 'build'

compileJava {
    options.encoding = "UTF-8"
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'ca.umontreal.iro.simul'
            artifactId = 'ssj'
            version = '3.3.2'
            from components.java

            // Populate the pom file
            pom {
                name = 'SSJ'
                description = 'Stochastic Simulation in Java'
                url = 'http://umontreal-simul.github.io/ssj/'
            }
        }
    }
}

// ****************************** DOCS ******************************

doxygen {
    generate_html true
    outputDir new File("$buildDir/docs")

    project_name "SSJ"
    project_number project.version

    source new File(projectDir, 'src/main/java')
    image_paths new File(projectDir, 'src/main/docs/images')

    template 'src/main/docs/Doxyfile'
}

// Konfigurasi Javadoc dengan MathJax
tasks.withType(Javadoc) {
    failOnError false
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    options.header = '<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>'
    options.addStringOption('--allow-script-in-comments', 'true') // Perbaikan: Gunakan tanda hubung ganda
}

task docsJar(type: Jar, dependsOn: doxygen) {
    archiveClassifier.set('javadoc') // Perbaikan: Gunakan archiveClassifier.set()
    from doxygen.outputDir
}


// ****************************** DATA ******************************

sourceSets {
    test {
        java {
            srcDirs = ['src/main/docs/examples']
            exclude 'markovchainrqmc/**' // FIXME: broken examples
            exclude 'ift6561examples/**'
            exclude 'latnetbuilder/**'  // We do not want this dependence.
            exclude 'umontreal.ssj.latnetbuilder/LatNetBuilderTest.java'
            exclude 'tutorial/Collision.java'
        }
    }
}

test {
    ignoreFailures = true
    useJUnit()
    workingDir = file(sourceSets.test.java.srcDirs[-1].path)
    exclude 'ExamplesTest.class'
    exclude 'LatNetBuilderTest.java'   // Remove: We do not want this dependence...
}

task examples(type: Test) {
    ignoreFailures = true
    description 'Runs the example programs.'
    outputs.upToDateWhen { false }
    dependsOn compileTestJava
    useJUnit()
    workingDir = temporaryDir
    include 'ExamplesTest.class'
    exclude 'LatNetBuilderTest.java'   // To be removed...
    doFirst {
        workingDir.mkdir()
    }
}

// ****************************** JAR ******************************

jar {
    manifest {
        attributes(
                "Extension-Name":           "SSJ",
                "Specification-Title":      "Stochastic Simulation in Java",
                "Specification-Version":    version,
                "Specification-Vendor":     "DIRO, Université de Montréal",
                "Implementation-Title":     "SSJ",
                "Implementation-Version":   version,
                "Implementation-Vendor":    "DIRO, Université de Montréal",
                "Class-Path":               configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
        )
    }
    metaInf {
        from('.') {
            include 'LICENSE.md'
            include 'NOTICE'
        }
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    metaInf {
        from('.') {
            include 'LICENSE.md'
            include 'NOTICE'
        }
    }
}


// ****************************** DISTRIBUTION ******************************

distributions {
    main {
        contents {
            into('lib') {
                from(jar)
                from(configurations.runtimeClasspath)
            }
            into('doc') {
                if (project.hasProperty('buildDocs')) {
                    from(doxygen.outputDir) {
                        include 'html/**'
                    }
                }
                from('src/main/docs') {
                    include 'examples/**'
                }
                from('.') {
                    include 'README.md'
                    include 'LICENSE.md'
                    include 'NOTICE'
                }
            }
        }
    }
}

distTar.compression = 'bzip2'
distTar {
    archiveExtension.set("tar.bz2")
}


// ****************************** WRAPPER ******************************

task showClasspath(dependsOn: configurations.runtimeClasspath) {
    println sourceSets.main.runtimeClasspath.asPath
}